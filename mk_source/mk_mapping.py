#!/usr/bin/env python

import os.path

path = os.path.join(os.path.dirname(__file__), '..')

def fn(fname, path=path):
    return os.path.join(path, fname)

l = []

def k(tc, label):
    global fk

    fk += 1
    
    l.append((tc, label, 0xEC00 + fk))
    
    
for fk in range(64):
    if fk in range(10):         # k0-k9'    0-9
        tc = 'k%d' % fk
    elif fk == 10:              # k;        10
        tc = 'k;'        
    elif fk in range(11, 20):   # F1-F9     11-10
        tc = 'F%d' % (fk - 10)
    elif fk in range(20, 46):   # FA-FZ     20-45
        tc = 'F%c' % chr(ord('A')-20+fk)
    elif fk in range(46, 64):   # Fa-Fr     46-63
        tc = 'F%c' % chr(ord('a')-46+fk)

    l.append((tc, 'F%d' % fk, 0xEC00 + fk))


k('ku', 'Up')
k('kd', 'Down')
k('kl', 'Left')
k('kr', 'Right')

k('kI', 'Insert')
k('kD', 'Delete')
k('kh', 'Home')
k('@7', 'End')
k('kP', 'PageUp')
k('kN', 'PageDn')

k('&6', 'Save')
k('&7', 'Suspend')
k('&8', 'Undo')
k('%1', 'Help')
k('%0', 'Redo')
k('%2', 'Mark')
k('%3', 'Message')
k('%4', 'Move')

k('%5', 'NextObject')
k('%8', 'PrevObject')
k('%6', 'Open')
k('%7', 'Options')
k('%9', 'Print')

k('&2', 'Refresh')
k('&3', 'Replace')
k('&4', 'Restart')
k('&5', 'Resume')

k(None, 'Select')
k('kA', 'InsertLine')
k('kL', 'DeleteLine')
k('kE', 'ClearEOL')
k('@0', 'Find')
k('@1', 'Begin')
k('@2', 'Cancel')
k('@3', 'Close')

k('@4', 'Command')
k('@5', 'Copy')
k('@6', 'Create')
k('@8', 'Enter')
k('@9', 'Exit')

k('K1', 'KeypadUpperLeft')
k('K3', 'KeypadUpperRight')
k('K2', 'KeypadCenter')
k('K4', 'KeypadLowerLeft')
k('K5', 'KeypadLowerRight')

k('ka', 'ClearAllTabs')
k('kB', 'BackTab')
k('kb', 'Backspace')
k('kC', 'ClearScreen')
k('kF', 'ScrollForward')
k('kH', 'HomeDown')
k('kM', 'InsertKeyMode')
k('kR', 'ScrollBackward')
k('kS', 'ClearEOS')
k('kT', 'SetTab')
k('kt', 'ClearTab')

#---

k(None, 'ShiftUp')
k(None, 'ShiftDown')
k('#4', 'ShiftLeft')
k('%i', 'ShiftRight')

k('#3', 'ShiftInsert')
k('*4', 'ShiftDelete')
k('#2', 'ShiftHome')
k('*7', 'ShiftEnd')
k(None, 'PageUp')
k(None, 'PageDown')

k('!1', 'ShiftSave')
k('!2', 'ShiftSuspend')
k('!3', 'ShiftUndo')
k('#1', 'ShiftHelp')
k('%g', 'ShiftRedo')
k(None, 'ShiftMark')
k('%a', 'ShiftMessage')
k('%b', 'ShiftMove')

k('%c', 'ShiftNextObject')
k('%e', 'ShiftPrevObject')
k(None, 'ShiftOpen')
k('%d', 'ShiftOptions')
k('%f', 'ShiftPrint')

k(None, 'ShiftRefresh')
k('%h', 'ShiftReplace')
k(None, 'ShiftRestart')
k('%j', 'ShiftResume')

k('*6', 'ShiftSelect')
k(None, 'ShiftInsertLine')
k('*5', 'ShiftDeleteLine')
k('*8', 'ShiftClearEOL')
k('*0', 'ShiftFind')
k('&9', 'ShiftBegin')
k('&0', 'ShiftCancel')
k(None, 'ShiftClose')

k('*1', 'ShiftCommand')
k('*2', 'ShiftCopy')
k('*3', 'ShiftCreate')
k(None, 'ShiftEnter')
k('*9', 'ShiftExit')

k(None, 'ShiftKeypadUpperLeft')
k(None, 'ShiftKeypadUpperRight')
k(None, 'ShiftKeypadCenter')
k(None, 'ShiftKeypadLowerLeft')
k(None, 'ShiftKeypadLowerRight')

k(None, 'ShiftClearAllTabs')
k(None, 'ShiftBackTab')
k(None, 'ShiftBackspace')
k(None, 'ShiftClearScreen')
k(None, 'ShiftScrollForward')
k(None, 'ShiftHomeDown')
k(None, 'ShiftInsertKeyMode')
k(None, 'ShiftScrollBackward')
k(None, 'ShiftClearEOS')
k(None, 'ShiftSetTab')
k(None, 'ShiftClearTab')

if 1:
    f = open(fn('tmacs/termioscap/tckeymap.h'), 'w')

    f.write('''/* this file is autogenerated */

#include <sys/types.h>

typedef struct TermcapKeymap_s {
    char        tccode[2];
    Py_UNICODE  unichar;
} TermcapKeymap;


static TermcapKeymap tckeys[] = {
''')

    for tc, label, uc in l:
        if tc:
            f.write("    '%c', '%c', 0x%04XU,\n" % (tc[0], tc[1], uc))

    f.write('''
    0, 0, 0x0000U
};
''')

    f.close()

# end tckeymap.h


if 1:
    f = open(fn('tmacs/termioscap/tckeymap.py'), 'w')

    f.write('''# this file is autogenerated

tckeys = (
''')

    for tc, label, uc in l:
        if tc:
            f.write("    ('%s', u'\u%04X'),\n" % (tc, uc))

    f.write(')\n')

    f.close()

# end tckeymap.py


symtochar = {}
chartosym = {}

for tc, label, uc in l:
    chartosym[unichr(uc)] = label

chartosym.update({
    u'\x00' :    '^@',
    u'\x01' :    '^A',
    u'\x02' :    '^B',
    u'\x03' :    '^C',
    u'\x04' :    '^D',
    u'\x05' :    '^E',
    u'\x06' :    '^F',
    u'\x07' :    '^G',
    u'\x08' :    '^H',
    u'\x09' :    '^I',
    u'\x0A' :    '^J',
    u'\x0B' :    '^K',
    u'\x0C' :    '^L',
    u'\x0D' :    '^M',
    u'\x0E' :    '^N',
    u'\x0F' :    '^O',
    u'\x10' :    '^P',
    u'\x11' :    '^Q',
    u'\x12' :    '^R',
    u'\x13' :    '^S',
    u'\x14' :    '^T',
    u'\x15' :    '^U',
    u'\x16' :    '^V',
    u'\x17' :    '^W',
    u'\x18' :    '^X',
    u'\x19' :    '^Y',
    u'\x1A' :    '^Z',
    u'\x1B' :    'ESC',

    u'\x1C' :    'FS',
    u'\x1D' :    'GS',
    u'\x1E' :    'RS',
    u'\x1F' :    'US',

    u'\x20' : 'Space',
    u'\x7f' : 'Del',    # vs Delete???

    u'['    :    '[' ,
    u']'    :    ']' ,
    u'>'    :    'GT',
    u'<'    :    'LT',
})

symtochar = dict([(l.lower(), u) for (u, l) in chartosym.items()])

f = open(fn('tmacs/ui/keysym_tab.py'), 'w')

f.write('symtochar = %s\n' % repr(symtochar))
f.write('\nchartosym = %s\n' % repr(chartosym))

f.close()

INPUT SYSTEM

From the point of view of the application proper, keyboard input comes
in the form of unicode characters.  Both for regular characters, like
regular ASCII characters, Unicode "foreign" characters, etc, and for
control characters.  For control characters like Tab that have a Unicode
assignment, we use that, for keys that don't (cursors keys, etc), we
have assigned a mapping using Unicode Private Use Area codes (U+ECxx,
specifically). 

We do not use, eg Unicode's "LEFTWARDS ARROW" character for the left
cursor key, as it is intended to represent the *symbol* of a left arrow,
not the key.  If the user is using something like Apple's Terminal.app
and uses the "Special Characters" menu to find and insert the Unicode
"LEFTWARDS ARROW", they expect a left-arrow glyph to be inserted, not
the cursor to move left. 

Since from the point of view of the application the input is in unicode,
hitting ^Q <Left> will insert a U+ECxx character, not an
escape-leftbracket-something that is terminal dependant. 

The input side works like this:

(...Something...)-->TermioscapInput--->WindowSystem

Something at a lower level interfaces with the event loop.  reads raw
input bytes and other events and sends them to the platform-specific
TermioscapInput module, which runs a state machine to translate them to
calls to an input method on WindowSystem as Unicode characters. 
WindowSystem is the first platform-independant part of the input chain,
and it is intended that stuff to the "left" of it would be replaced with
something else in a non-Unix/TTY "platform". 

class TermioscapInput: 
	input(bytestring): pass
	timeout(): pass
	setTarget(WindowSystem): pass
        handleSIGWINCH(): pass

class WindowSystem:
	input(unichar)
	timeout()
	resizeWindow(w, h)



======================
Marker Editing Methods
======================

:Author: Ty Sarna
:Version: $Id: MARKEDIT.txt,v 1.8 2007-10-10 15:20:33 tsarna Exp $

.. contents ::

Basics
------

The most common and obvious editing operation is inserting text::

    >>> from tmacs.edit.ubuf import *
    >>> b = ubuf(u'Hello World\n')
    >>> m = marker(b)
    >>> m.insert(u'Hi ')
    >>> b[:]
    u'Hi Hello World\n'

The text is inserted to the left of the marker, causing the marker to advance::

    >>> m.start
    3

Text may be inserted anywhere::

    >>> m.start = 8
    >>> m.insert(u' There')
    >>> b[:]
    u'Hi Hello There World\n'
    >>> m.start
    14

There is also a method to insert to the right of the marker. This is
useful for implementing several emacs commands like ^O (open line)::

    >>> m.insertnext(u'\n')
    >>> b[:]
    u'Hi Hello There\n World\n'
    >>> m.start
    14


Deleting
--------

Text may be deleted leftwards, a'la the backspace key::

    >>> b[:]
    u'Hi Hello There\n World\n'
    >>> m.start
    14
    >>> m.delprev()
    >>> b[:]
    u'Hi Hello Ther\n World\n'
    >>> m.start
    13
    >>> m.delprev(2)
    >>> b[:]
    u'Hi Hello Th\n World\n'
    >>> m.start
    11

Or may be deleted forwards, a'la the delete key::

    >>> m.delnext()
    >>> b[:]
    u'Hi Hello Th World\n'
    >>> m.start
    11
    >>> m.delnext(2)
    >>> b[:]
    u'Hi Hello Thorld\n'
    >>> m.start
    11

With negative arguments, each method acts like its counterpart, deleting
in the other direction::

    >>> m.delnext(-2)
    >>> b[:]
    u'Hi Hello orld\n'
    >>> m.start
    9
    >>> m.delprev(-2)
    >>> b[:]
    u'Hi Hello ld\n'
    >>> m.start
    9

Too-large arguments are trimmed to the beginning or end of the buffer::

    >>> m.delprev(42)
    >>> b[:]
    u'ld\n'
    >>> m.start
    0
    >>> m.delnext(42)
    >>> b[:]
    u''
    >>> m.start
    0


Deleting by Words
-----------------

It's also possible to delete by words. A negative argument deletes in
the opposite direction. When deleting prev (next) the end (start) is
assumed to be the current cursor position, even if in the middle of a word::

    >>> b[:] = u'One two three four five'
    >>> m.start = 10
    >>> m.delnextword()
    >>> b[:]
    u'One two thfour five'
    >>> m.prevword()
    >>> m.delprevword()
    >>> b[:]
    u'One thfour five'
    >>> m.delprevword(-2)
    >>> b[:]
    u'One '
    
    
Word Case Changes
-----------------

The `wordupper()`, `wordlower()`, and `wordtitle()` methods convert
following words to upper, lower, or title (initial cap) case
respectively, advancing the mark to the following word::

    >>> b[:] = u'OLD MACDONALD HAD A FARM, eieio'
    >>> m.start = 0
    >>> m.wordtitle()
    >>> b[:]
    u'Old MACDONALD HAD A FARM, eieio'
    >>> m.start
    4

It's possible to advance by (and change case of) more than one word at a time::

    >>> m.wordtitle(2)
    >>> b[:]
    u'Old Macdonald Had A FARM, eieio'
    >>> m.start
    18

When advancing forwards, the current position is assumed to be the start of
the word, which may be useful for words containing internal caps::

    >>> m.start = 7
    >>> m.wordtitle()
    >>> b[:]
    u'Old MacDonald Had A FARM, eieio'
    >>> m.start
    14

Let's use the other methods on the rest of the sentence::

    >>> m.wordlower(3)
    >>> b[:]
    u'Old MacDonald had a farm, eieio'
    >>> m.start
    26
    >>> m.wordupper()
    >>> b[:]
    u'Old MacDonald had a farm, EIEIO'
    >>> m.start
    31

Negative offsets are supported::    

    >>> m.wordlower(-1)
    >>> b[:]
    u'Old MacDonald had a farm, eieio'
    >>> m.start
    26

If in the middle of a word, the current position is assumed to be the end::

    >>> m.start = 22
    >>> m.wordupper(-3)
    >>> b[:]
    u'Old MacDonald HAD A FArm, eieio'
    >>> m.start
    14

    
Killing
-------

Killing (aka cutting) of text is supported by two different marker
methods, `killline()` and `killtext()`, which together make up the
killtext command in the editor.

Killing puts the text into a buffer, so we will need a kill buffer to
work with, as well as some example text::

    >>> k = ubuf()
    >>> b[:] = u'Line 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\n'

Killline kills from the current position up until (but not including)
the next newline, and places it in the buffer::

    >>> m.start = 2
    >>> m.killline(k)
    >>> b[:]
    u'Li\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\n'
    >>> k[:]
    u'ne 1'

Unless the next character is a newline, in which case it kills the newline::

    >>> m.killline(k, True)
    >>> b[:]
    u'LiLine 2\nLine 3\nLine 4\nLine 5\nLine 6\n'
    >>> k[:]
    u'ne 1\n'

Note that the kill buffer was appended to in this case because we
specified True as the second argument.  Let's reset and talk about
`killtext()` next::

    >>> m.start = 0
    >>> m.killline(k)
    >>> m.insert(u"Line 1\nLine 2")
    >>> b[:]
    u'Line 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\n'    
    
Killtext deletes by whole lines. With a positive argument `n`, it
deletes from dot through the next n lines, inclusive of their newlines::

    >>> m.start = 0
    >>> m.nextline(2)
    >>> m += 2
    >>> m.killtext(k, 2)
    >>> b[:]
    u'Line 1\nLine 2\nLiLine 5\nLine 6\n'
    >>> k[:]
    u'ne 3\nLine 4\n'

With a 0 or negative argument, it deletes from dot to the beginning of
the line and through the next n lines::

    >>> m.insert(k)
    >>> m.start = 0
    >>> m.nextline(2)
    >>> m += 2
    >>> m.killtext(k, 0)
    >>> b[:]
    u'Line 1\nLine 2\nne 3\nLine 4\nLine 5\nLine 6\n'    
    >>> k[:]
    u'Li'
    >>> m.insert(k)
    >>> m.nextline()
    >>> m.killtext(k, -2)
    >>> b[:]
    u'Line 1\nne 4\nLine 5\nLine 6\n'    
    >>> k[:]
    u'Line 2\nLine 3\nLi'
    

=============================
Marker movement and Searching
=============================

:Author: Ty Sarna
:Version: $Id: MARKMOVE.txt,v 1.4 2007-10-04 16:56:20 tsarna Exp $

.. contents ::

Basics
------

The first two movement methods are the most trivial: movement to the
beginning and end of the buffer::

    >>> from tmacs.edit.ubuf import *
    >>> b = ubuf(u'This is Line 1\n\t\nThis is Line 3\nLine 4')
    >>> m = marker(b)
    >>> m.start = 5
    >>> m.start = 0
    >>> m.start
    0
    >>> len(b)
    38
    >>> m.tobufend()
    >>> m.start
    38


Lines
-----

The marker may be moved to the end of the current line::

    >>> m.start = 5
    >>> m.tolineend()
    >>> m.start
    14

Calling `tolineend()` while already at the end of line doesn't advance
to the next line::

    >>> m.tolineend()
    >>> m.start
    14

It will also stop at the end of the buffer, even if it doesn't end with
a newline::

    >>> m.start = -3
    >>> m.start
    35
    >>> m.tolineend()
    >>> m.start
    38
    >>> m.tolineend()
    >>> m.start
    38
    
Going to the start of a line works similarly::

    >>> m.tolinestart()
    >>> m.start
    32
    >>> m.tolinestart()
    >>> m.start
    32
    >>> m.start = 3
    >>> m.tolinestart()
    >>> m.start
    0
    >>> m.tolinestart()
    >>> m.start
    0

It is also of course possible to move up and down by lines::

    >>> m.nextline()
    >>> m.start
    15
    >>> b[m]
    u'\t'
    >>> m.nextline(2)
    >>> m.start
    32
    >>> b[m]
    u'L'
    >>> m.nextline(10)
    >>> m.start
    38
    >>> m.prevline()
    >>> m.start
    17
    >>> m.prevline(2)
    >>> m.start
    0
    >>> m.prevline(10)
    >>> m.start
    0

Negative arguments are accepted and cause nextline to move upwards and
prevline to move downwards::
    
    >>> m.prevline(-1)
    >>> m.start
    15
    >>> m.prevline(-2)
    >>> m.start
    32
    >>> m.prevline(-10)
    >>> m.start
    38
    >>> m.nextline(-1)
    >>> m.start
    17
    >>> m.nextline(-2)
    >>> m.start
    0
    >>> m.nextline(-10)
    >>> m.start
    0


Movement by lines tries to keep the cursor at the same display column,
as long as there is no intervening non-line-oriented cursor movement or
editing::

    >>> m.start = 10
    >>> b[m]
    u'n'
    >>> m.nextline()
    >>> m.start # even though we're in column 8 now, if we move down again...
    16
    >>> m.nextline()
    >>> m.start
    27
    >>> b[m] # we're back at the n in colun 10 of line 3
    u'n'
    >>> m.prevline(2)
    >>> m.start
    10
    >>> b[m] # back at the n in column 10 of line 1
    u'n'

However if there had been intervening cursor motion on line 2, the "seek
column" would have been reset. Note that even though line two contains
only a single character, it's a tab so the end of that line is
calculated as column 8::

    >>> m.start = 10
    >>> m.nextline()
    >>> m.start # we're in column 8 now
    16
    >>> m -= 1
    >>> m += 1
    >>> m.start # still in column 8 now, but motion reset the seek col to 8
    16
    >>> m.nextline()
    >>> m.start
    25
    >>> b[m] # so now we ended up in colun 8 of line 3
    u'L'
    >>> m.prevline(2)
    >>> m.start
    8
    >>> b[m] # back at the L in column 8 of line 1
    u'L'

There is also a reset() method on a marker that explicitly resets any
nortion of last activity, including the column seeking behavior::

    >>> m.start = 10
    >>> m.nextline()
    >>> m.start # we're in column 8 now
    16
    >>> m.reset()
    >>> m.start # still in column 8 now, but we reset the marker.
    16
    >>> m.nextline()
    >>> m.start
    25
    >>> b[m] # so now we ended up in colun 8 of line 3
    u'L'
    >>> m.prevline(2)
    >>> m.start
    8
    >>> b[m] # back at the L in column 8 of line 1
    u'L'

It is also possible to go directly to a specific line by number. Note
that for this interface lines are numbered starting at 1 rather than 0,
because lines are almost universally numbered that way -- in eg compiler
error messages, etc. The column seeking behavior also applies to `toline()`::

    >>> m.start = 8
    >>> m.toline(3)
    >>> m.start
    25
    >>> m.toline(1)
    >>> m.start
    8
    >>> m.toline(100)
    >>> m.start
    38

It is also possible to go to a negatively-numbered line. In this case -1
is the last line of the file, -2 is the second to last, etc::

    >>> m.toline(-100)
    >>> m.start
    8
    >>> m.toline(-1)
    >>> m.start
    38
    >>> m.toline(-3)
    >>> m.start
    16    


Words
-----

It is also possible to move forward by words::

    >>> b[:]
    u'This is Line 1\n\t\nThis is Line 3\nLine 4'
    >>> m.start = 0
    >>> m.nextword(); m.start
    5
    >>> m.nextword(0); m.start
    5
    >>> m.nextword(1); m.start
    8
    >>> m.nextword(2); m.start
    17
    >>> m.nextword(100); m.start
    38

We can also move backwards by words::

    >>> m.prevword(); m.start
    37
    >>> m.prevword(0); m.start
    37
    >>> m.prevword(1); m.start
    32
    >>> m.prevword(2); m.start
    25
    >>> m.prevword(4); m.start
    8
    >>> m.prevword(42); m.start
    0

`prevword` and `nextword` can be given negative arguments, in which case
they each act like their counterpart. We can repeat the same sequence of
movements resulting in the same positions, but this time moving
backwards by negative words and then forwards by negative words::

    >>> m.prevword(-1); m.start
    5
    >>> m.prevword(0); m.start
    5
    >>> m.prevword(-1); m.start
    8
    >>> m.prevword(-2); m.start
    17
    >>> m.prevword(-100); m.start
    38
    >>> m.nextword(-1); m.start
    37
    >>> m.nextword(0); m.start
    37
    >>> m.nextword(-1); m.start
    32
    >>> m.nextword(-2); m.start
    25
    >>> m.nextword(-4); m.start
    8
    >>> m.nextword(-42); m.start
    0

